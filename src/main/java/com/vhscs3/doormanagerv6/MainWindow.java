/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.vhscs3.doormanagerv6;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author irad_Allen
 */
public class MainWindow extends javax.swing.JFrame {
    
    private HashMap<String, Door>       doors;             //Collection of doors, door name is the key
    private HashMap<String, Schedule>   schedules;         //Collection of schedules, schedule name is the key
    private HashMap<Integer, Badge>     badges;            //Collection of BADGES, employeeID is the key
    private JComponent[]                schedulesGroup;    // Array of enabled/disabled form elements on the schedules tabbed pane
    private JComponent[]                doorsGroup;        // Array of enabled/disabled form elements on the doors tabbed pane
    private Schedule                    currentSchedule;    // Used to get values for editing and adding new schedule 

    public MainWindow() {
        
        //DataFactory df = new DataFactory();
        //writeModel(df.getModel());

        DoorManagerModel model = readModel();
        doors = model.doors;
        schedules = model.schedules;
        badges = model.badges;
        
        initComponents();
        
        buildSchedulesGroup();
        
        buildSchedulesTable();
        
        setGroupEnabled(false, schedulesGroup);
        //setGroupEnabled(false, doorsGroup);
               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        schedules_dialog_times = new javax.swing.JDialog();
        schedules_comboBox_openHour = new javax.swing.JComboBox<>();
        schedules_comboBox_closeMinute = new javax.swing.JComboBox<>();
        schedules_label_timesOpen = new javax.swing.JLabel();
        schedules_label_timesClose = new javax.swing.JLabel();
        schedules_button_timesSave = new javax.swing.JButton();
        schedules_button_timesCancel = new javax.swing.JButton();
        schedules_label_timesInstruction = new javax.swing.JLabel();
        schedules_comboBox_closeHour = new javax.swing.JComboBox<>();
        schedules_comboBox_openMinute = new javax.swing.JComboBox<>();
        tabbedPane = new javax.swing.JTabbedPane();
        dashBoard_tabbedPane = new javax.swing.JPanel();
        doors_tabbedPane = new javax.swing.JPanel();
        schedules_tabbedPanel = new javax.swing.JPanel();
        schedules_scrollPane_schedulesTableDisplay = new javax.swing.JScrollPane();
        schedules_table_display = new javax.swing.JTable();
        schedules_panel_buttons = new javax.swing.JPanel();
        schedules_button_add = new javax.swing.JButton();
        schedules_button_edit = new javax.swing.JButton();
        schedules_button_delete = new javax.swing.JButton();
        schedules_button_save = new javax.swing.JButton();
        schedules_panel_elements = new javax.swing.JPanel();
        schedules_textField_name = new javax.swing.JTextField();
        schedules_scrollPane_desctiption = new javax.swing.JScrollPane();
        schedules_textArea_description = new javax.swing.JTextArea();
        schedules_label_name = new javax.swing.JLabel();
        schedules_label_description = new javax.swing.JLabel();
        schedules_label_color = new javax.swing.JLabel();
        schedules_button_color = new javax.swing.JButton();
        schedules_label_colorDisplay = new javax.swing.JLabel();
        schedules_label_times = new javax.swing.JLabel();
        schedules_button_addTime = new javax.swing.JButton();
        schedules_button_editTime = new javax.swing.JButton();
        schedules_button_deleteTime = new javax.swing.JButton();
        schedules_scrollPane_times = new javax.swing.JScrollPane();
        schedules_table_times = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menu_edit = new javax.swing.JMenu();

        schedules_dialog_times.setMinimumSize(new java.awt.Dimension(400, 300));
        schedules_dialog_times.setModal(true);
        schedules_dialog_times.setResizable(false);

        schedules_comboBox_openHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HOUR", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        schedules_comboBox_closeMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MINUTE", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        schedules_label_timesOpen.setText("Open Time");

        schedules_label_timesClose.setText("Close Time");

        schedules_button_timesSave.setText("Save");
        schedules_button_timesSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_timesSaveActionPerformed(evt);
            }
        });

        schedules_button_timesCancel.setText("Cancel");
        schedules_button_timesCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_timesCancelActionPerformed(evt);
            }
        });

        schedules_label_timesInstruction.setText("Select an OPEN and CLOSE time:");

        schedules_comboBox_closeHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HOUR", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        schedules_comboBox_openMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MINUTE", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        javax.swing.GroupLayout schedules_dialog_timesLayout = new javax.swing.GroupLayout(schedules_dialog_times.getContentPane());
        schedules_dialog_times.getContentPane().setLayout(schedules_dialog_timesLayout);
        schedules_dialog_timesLayout.setHorizontalGroup(
            schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(schedules_label_timesInstruction)
                    .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                        .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(schedules_label_timesOpen)
                            .addComponent(schedules_label_timesClose))
                        .addGap(30, 30, 30)
                        .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                                .addComponent(schedules_comboBox_openHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(schedules_comboBox_openMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                                .addComponent(schedules_comboBox_closeHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(schedules_comboBox_closeMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                        .addComponent(schedules_button_timesSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(schedules_button_timesCancel)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        schedules_dialog_timesLayout.setVerticalGroup(
            schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(schedules_label_timesInstruction)
                .addGap(26, 26, 26)
                .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_comboBox_openHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schedules_label_timesOpen)
                    .addComponent(schedules_comboBox_openMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_comboBox_closeHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schedules_comboBox_closeMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schedules_label_timesClose))
                .addGap(28, 28, 28)
                .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_button_timesSave)
                    .addComponent(schedules_button_timesCancel))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout dashBoard_tabbedPaneLayout = new javax.swing.GroupLayout(dashBoard_tabbedPane);
        dashBoard_tabbedPane.setLayout(dashBoard_tabbedPaneLayout);
        dashBoard_tabbedPaneLayout.setHorizontalGroup(
            dashBoard_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1269, Short.MAX_VALUE)
        );
        dashBoard_tabbedPaneLayout.setVerticalGroup(
            dashBoard_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 769, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Dashboard", dashBoard_tabbedPane);

        javax.swing.GroupLayout doors_tabbedPaneLayout = new javax.swing.GroupLayout(doors_tabbedPane);
        doors_tabbedPane.setLayout(doors_tabbedPaneLayout);
        doors_tabbedPaneLayout.setHorizontalGroup(
            doors_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1269, Short.MAX_VALUE)
        );
        doors_tabbedPaneLayout.setVerticalGroup(
            doors_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 769, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Doors", doors_tabbedPane);

        schedules_table_display.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Color", "Open Times"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        schedules_table_display.setColumnSelectionAllowed(true);
        schedules_table_display.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                schedules_table_displayMouseClicked(evt);
            }
        });
        schedules_scrollPane_schedulesTableDisplay.setViewportView(schedules_table_display);
        schedules_table_display.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        schedules_button_add.setText("Add");
        schedules_button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_addActionPerformed(evt);
            }
        });

        schedules_button_edit.setText("Edit");
        schedules_button_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_editActionPerformed(evt);
            }
        });

        schedules_button_delete.setText("Delete");
        schedules_button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_deleteActionPerformed(evt);
            }
        });

        schedules_button_save.setText("Save");
        schedules_button_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout schedules_panel_buttonsLayout = new javax.swing.GroupLayout(schedules_panel_buttons);
        schedules_panel_buttons.setLayout(schedules_panel_buttonsLayout);
        schedules_panel_buttonsLayout.setHorizontalGroup(
            schedules_panel_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_panel_buttonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(schedules_button_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schedules_button_edit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schedules_button_delete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(schedules_button_save)
                .addGap(14, 14, 14))
        );
        schedules_panel_buttonsLayout.setVerticalGroup(
            schedules_panel_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_panel_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(schedules_button_add)
                .addComponent(schedules_button_edit)
                .addComponent(schedules_button_delete)
                .addComponent(schedules_button_save))
        );

        schedules_textArea_description.setColumns(20);
        schedules_textArea_description.setRows(5);
        schedules_scrollPane_desctiption.setViewportView(schedules_textArea_description);

        schedules_label_name.setText("Name");

        schedules_label_description.setText("Desctiption");

        schedules_label_color.setText("Color");

        schedules_button_color.setText("Choose Color");
        schedules_button_color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_colorActionPerformed(evt);
            }
        });

        schedules_label_times.setText("Times");

        schedules_button_addTime.setText("Add Time");
        schedules_button_addTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_addTimeActionPerformed(evt);
            }
        });

        schedules_button_editTime.setText("Edit Time");
        schedules_button_editTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_editTimeActionPerformed(evt);
            }
        });

        schedules_button_deleteTime.setText("Delete Time");
        schedules_button_deleteTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_deleteTimeActionPerformed(evt);
            }
        });

        schedules_table_times.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Open", "Close"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        schedules_table_times.setColumnSelectionAllowed(true);
        schedules_scrollPane_times.setViewportView(schedules_table_times);
        schedules_table_times.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout schedules_panel_elementsLayout = new javax.swing.GroupLayout(schedules_panel_elements);
        schedules_panel_elements.setLayout(schedules_panel_elementsLayout);
        schedules_panel_elementsLayout.setHorizontalGroup(
            schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(schedules_label_times)
                    .addComponent(schedules_label_color)
                    .addComponent(schedules_label_name)
                    .addComponent(schedules_label_description))
                .addGap(18, 18, 18)
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(schedules_textField_name)
                    .addComponent(schedules_scrollPane_desctiption)
                    .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                        .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                                .addComponent(schedules_button_color)
                                .addGap(18, 18, 18)
                                .addComponent(schedules_label_colorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                                .addComponent(schedules_button_addTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(schedules_button_editTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(schedules_button_deleteTime)))
                        .addGap(0, 93, Short.MAX_VALUE))
                    .addComponent(schedules_scrollPane_times, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        schedules_panel_elementsLayout.setVerticalGroup(
            schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_textField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schedules_label_name))
                .addGap(18, 18, 18)
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(schedules_label_description)
                    .addComponent(schedules_scrollPane_desctiption, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_button_color)
                    .addComponent(schedules_label_color)
                    .addComponent(schedules_label_colorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_label_times)
                    .addComponent(schedules_button_addTime)
                    .addComponent(schedules_button_editTime)
                    .addComponent(schedules_button_deleteTime))
                .addGap(18, 18, 18)
                .addComponent(schedules_scrollPane_times, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout schedules_tabbedPanelLayout = new javax.swing.GroupLayout(schedules_tabbedPanel);
        schedules_tabbedPanel.setLayout(schedules_tabbedPanelLayout);
        schedules_tabbedPanelLayout.setHorizontalGroup(
            schedules_tabbedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_tabbedPanelLayout.createSequentialGroup()
                .addComponent(schedules_scrollPane_schedulesTableDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(schedules_tabbedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedules_tabbedPanelLayout.createSequentialGroup()
                        .addComponent(schedules_panel_buttons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(schedules_panel_elements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        schedules_tabbedPanelLayout.setVerticalGroup(
            schedules_tabbedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(schedules_scrollPane_schedulesTableDisplay)
            .addGroup(schedules_tabbedPanelLayout.createSequentialGroup()
                .addComponent(schedules_panel_buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(schedules_panel_elements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Schedules", schedules_tabbedPanel);

        menu_file.setText("File");
        menuBar.add(menu_file);

        menu_edit.setText("Edit");
        menuBar.add(menu_edit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void schedules_button_colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_colorActionPerformed
        
        Color color = JColorChooser.showDialog(MainWindow.this,
                                                "Choose Schedule Color", 
                                                schedules_label_colorDisplay.getBackground());
        
        if (color != null) {
            schedules_label_colorDisplay.setBackground(color);
        }
        
        
    }//GEN-LAST:event_schedules_button_colorActionPerformed

    private void schedules_table_displayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_schedules_table_displayMouseClicked
        // Detect the schedule that is selected, use column[0] to get the name,
        // then uses the name to get the appropriate schedule from the 
        // schedules HashMap.  Uses the schedule to populate the display fields.
        
        int row = schedules_table_display.getSelectedRow();
        
        String name  = (String) schedules_table_display.getValueAt(row, 0);
        Schedule schedule = schedules.get(name);
        
        currentSchedule = schedule;
        
        schedules_textField_name.setText(name);
        schedules_textArea_description.setText(schedule.getDescription());
        schedules_label_colorDisplay.setBackground(schedule.getColor());
        schedules_label_colorDisplay.setOpaque(true);
        
        buildTimesTable(schedule.getTimes());
        
        setGroupEnabled(true, schedulesGroup);
        schedules_textField_name.setEditable(false);
        schedules_textArea_description.setEditable(false);
        

    }//GEN-LAST:event_schedules_table_displayMouseClicked

    private void schedules_button_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_deleteActionPerformed

        
        // Step 1 - Get the selected schedule name from the talbe
        int row = schedules_table_display.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)schedules_table_display.getModel();
        String name = (String) model.getValueAt(row,0);
        
        // Confirm schedule deletion.  If JOptionPane returns false, return out of the method.
        int confirmation = JOptionPane.showConfirmDialog(null, "CONFIRM: Delete " + name + " schedule?");
        
        if (confirmation != JOptionPane.YES_OPTION) {
            return;
        }

        // Step 2 - Delete the schedule from the schedules HashMap
        schedules.remove(name);
        
        // Step 3 - Rebuild the schedules display table
        buildSchedulesTable();
        
        // Step 4 - Disable the thingys
        setGroupEnabled(false, schedulesGroup);

        // Step 5 - Clear the fields
        resetScheduleFields();
        
        currentSchedule = null;
           
    }//GEN-LAST:event_schedules_button_deleteActionPerformed

    private void schedules_button_addTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_addTimeActionPerformed
        // TODO add your handling code here:
        
        clearTimesDialogFields();
        schedules_dialog_times.setVisible(true);
              
    }//GEN-LAST:event_schedules_button_addTimeActionPerformed

    private void schedules_button_timesCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_timesCancelActionPerformed
        // TODO add your handling code here:
        schedules_dialog_times.setVisible(false);
        clearTimesDialogFields();
        
    }//GEN-LAST:event_schedules_button_timesCancelActionPerformed

    private void schedules_button_timesSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_timesSaveActionPerformed
        
        //Step 1 - Verify that all fields are selected
        if (schedules_comboBox_closeHour.getSelectedIndex()     == 0 ||
            schedules_comboBox_openHour.getSelectedIndex()      == 0 ||
            schedules_comboBox_closeMinute.getSelectedIndex()   == 0 ||
            schedules_comboBox_openMinute.getSelectedIndex()    == 0){
            
            JOptionPane.showMessageDialog(MainWindow.this, "ERROR: Please confirm that all fields are selected");
            return;
        }
        
        // Step 2 - Verify that close time is after open time
        int openHour    = Integer.parseInt((String)schedules_comboBox_openHour.getSelectedItem());
        int openMinute  = Integer.parseInt((String)schedules_comboBox_openMinute.getSelectedItem());
        int closeHour   = Integer.parseInt((String)schedules_comboBox_closeHour.getSelectedItem());
        int closeMinute = Integer.parseInt((String)schedules_comboBox_closeMinute.getSelectedItem());
        
        if (closeHour < openHour || (closeHour == openHour && closeMinute < openMinute)) {
            JOptionPane.showMessageDialog(MainWindow.this, "ERROR: Close time must be greater than or equal to open time");
            return;
        } 
        
        // Step 3 - Create a DoorTime
        GregorianCalendar openTime  = new GregorianCalendar(2022, 9, 4, openHour, openMinute);
        GregorianCalendar closeTime = new GregorianCalendar(2022, 9, 4, closeHour, closeMinute);
        DoorTime time = new DoorTime(openTime, closeTime);
        
        // Step 5 - Add the door time to the schedule.times ArrayList
        currentSchedule.getTimes().add(time);
        
        // Step 6 - rebuild the times table to reflect the changes
        buildTimesTable(currentSchedule.getTimes());
        
        // Close the Dialog window and set 
        schedules_dialog_times.setVisible(false);
        
    }//GEN-LAST:event_schedules_button_timesSaveActionPerformed

    private void schedules_button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_addActionPerformed
        
        resetScheduleFields();
        currentSchedule = new Schedule("", "", Color.GREEN, new ArrayList<DoorTime>());
        setGroupEnabled(true, schedulesGroup);
        schedules_textField_name.setEditable(true);
        schedules_textArea_description.setEditable(true);
    }//GEN-LAST:event_schedules_button_addActionPerformed

    private void schedules_button_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_editActionPerformed
        setGroupEnabled(true, schedulesGroup);
        schedules_textField_name.setEditable(true);
        schedules_textArea_description.setEditable(true);
        
    }//GEN-LAST:event_schedules_button_editActionPerformed

    private void schedules_button_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_saveActionPerformed
        String name = schedules_textField_name.getText();
        currentSchedule.setDescription(schedules_textArea_description.getText());
        currentSchedule.setColor(schedules_label_colorDisplay.getBackground());
        if (schedules.containsKey(name)){
            schedules.remove(name);
        }
        
        schedules.put(name, currentSchedule);
        buildSchedulesTable();
    }//GEN-LAST:event_schedules_button_saveActionPerformed

    private void schedules_button_editTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_editTimeActionPerformed
        int row = schedules_table_times.getSelectedRow();
        schedules_dialog_times.setVisible(true);
        currentSchedule.getTimes().remove(row);
        buildTimesTable(currentSchedule.getTimes());
        //JOptionPane.showMessageDialog(MainWindow.this, "ERROR: please select a time you want to edit");
        //return;
        
    }//GEN-LAST:event_schedules_button_editTimeActionPerformed

    private void schedules_button_deleteTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_deleteTimeActionPerformed
        
        int row = schedules_table_times.getSelectedRow();
        
        int confirmation = JOptionPane.showConfirmDialog(null, "CONFIRM: Delete time?");
        
        if (confirmation != JOptionPane.YES_OPTION) {
            return;
        }
        
        currentSchedule.getTimes().remove(row);
        buildTimesTable(currentSchedule.getTimes());
        
    }//GEN-LAST:event_schedules_button_deleteTimeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dashBoard_tabbedPane;
    private javax.swing.JPanel doors_tabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menu_edit;
    private javax.swing.JMenu menu_file;
    private javax.swing.JButton schedules_button_add;
    private javax.swing.JButton schedules_button_addTime;
    private javax.swing.JButton schedules_button_color;
    private javax.swing.JButton schedules_button_delete;
    private javax.swing.JButton schedules_button_deleteTime;
    private javax.swing.JButton schedules_button_edit;
    private javax.swing.JButton schedules_button_editTime;
    private javax.swing.JButton schedules_button_save;
    private javax.swing.JButton schedules_button_timesCancel;
    private javax.swing.JButton schedules_button_timesSave;
    private javax.swing.JComboBox<String> schedules_comboBox_closeHour;
    private javax.swing.JComboBox<String> schedules_comboBox_closeMinute;
    private javax.swing.JComboBox<String> schedules_comboBox_openHour;
    private javax.swing.JComboBox<String> schedules_comboBox_openMinute;
    private javax.swing.JDialog schedules_dialog_times;
    private javax.swing.JLabel schedules_label_color;
    private javax.swing.JLabel schedules_label_colorDisplay;
    private javax.swing.JLabel schedules_label_description;
    private javax.swing.JLabel schedules_label_name;
    private javax.swing.JLabel schedules_label_times;
    private javax.swing.JLabel schedules_label_timesClose;
    private javax.swing.JLabel schedules_label_timesInstruction;
    private javax.swing.JLabel schedules_label_timesOpen;
    private javax.swing.JPanel schedules_panel_buttons;
    private javax.swing.JPanel schedules_panel_elements;
    private javax.swing.JScrollPane schedules_scrollPane_desctiption;
    private javax.swing.JScrollPane schedules_scrollPane_schedulesTableDisplay;
    private javax.swing.JScrollPane schedules_scrollPane_times;
    private javax.swing.JPanel schedules_tabbedPanel;
    private javax.swing.JTable schedules_table_display;
    private javax.swing.JTable schedules_table_times;
    private javax.swing.JTextArea schedules_textArea_description;
    private javax.swing.JTextField schedules_textField_name;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables


    private void writeModel(DoorManagerModel model) {
       // Writes the model as an object to disk
       
        try {
            
            FileOutputStream    fos = new FileOutputStream(new File("model.dms"));
            ObjectOutputStream  oos = new ObjectOutputStream(fos);
            
            oos.writeObject(model);
            oos.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
    }

    private DoorManagerModel readModel() {
        
        DoorManagerModel dmm = null;
        
        try {
            
            FileInputStream     fis = new FileInputStream(new File("model.dms"));
            ObjectInputStream   ois = new ObjectInputStream(fis);
            
            dmm = (DoorManagerModel)ois.readObject();
            fis.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return dmm;
    }

    private void buildSchedulesTable() {
        
        Object[][] data = new Object[schedules.size()][4];
        String[] columnHeaders = {"Name", "Descritpion", "Color", "Open Times"};
     
        int row = 0;
        
        for (String key : schedules.keySet()) {
            Schedule schedule = schedules.get(key);
            
            data[row][0] = schedule.getName();
            data[row][1] = schedule.getDescription();
            
            Color color  = schedule.getColor();
            data[row][2] = String.format("%d, %d, %d",color.getRed(), color.getGreen(), color.getBlue());
            data[row][3] = schedule.getTimes();
            
            row++;
            
        }
        
        DefaultTableModel dfm = (DefaultTableModel)schedules_table_display.getModel();
        dfm.setDataVector(data, columnHeaders);

    }
    
    private void buildTimesTable(ArrayList<DoorTime> times) {

        if (times == null || times.size() == 0) {
            return;
        }
        
        Object[][] data = new Object[times.size()][2];
        String[] columnHeaders = {"Open Time", "Close Time"};
     
        int row = 0;
        
        for (DoorTime time : times) {
            
            String[] timesSplit = time.toString().split(", ");
            
            data[row][0] = timesSplit[0];
            data[row][1] = timesSplit[1];
            
            row++;
            
        }
        
        DefaultTableModel dfm = (DefaultTableModel)schedules_table_times.getModel();
        dfm.setDataVector(data, columnHeaders);
    
    }

    private void buildSchedulesGroup() {
    
        schedulesGroup = new JComponent[10];
        
        schedulesGroup[0] = schedules_table_times;
        schedulesGroup[1] = schedules_button_edit;
        schedulesGroup[2] = schedules_button_delete;
        schedulesGroup[3] = schedules_button_save;        
        schedulesGroup[4] = schedules_textField_name;
        schedulesGroup[5] = schedules_textArea_description;        
        schedulesGroup[6] = schedules_button_color;       
        schedulesGroup[7] = schedules_button_addTime;
        schedulesGroup[8] = schedules_button_editTime;
        schedulesGroup[9] = schedules_button_deleteTime;       
        
    }

    private void setGroupEnabled(boolean state, JComponent[] group) {
    
        for (JComponent component : group) {
            component.setEnabled(state);
        }
        
    }

    private void clearTimesDialogFields() {
        // Resets the times Dialog window back to default settings
        
        schedules_comboBox_openHour.setSelectedIndex(0);
        schedules_comboBox_openMinute.setSelectedIndex(0);
        schedules_comboBox_closeHour.setSelectedIndex(0);
        schedules_comboBox_closeMinute.setSelectedIndex(0);
    
    }

    private void resetScheduleFields() {

        schedules_textField_name.setText("");
        schedules_textArea_description.setText("");
        schedules_label_colorDisplay.setBackground(Color.GRAY);
        schedules_label_colorDisplay.setOpaque(false);
        
        DefaultTableModel timesModel = (DefaultTableModel) schedules_table_times.getModel();
        timesModel.setRowCount(0);
        
    }


    
}
